1. Установлена на виртуальную машину Debian GNU/Linux 10
3. 
    3.1 Используется  консольный текстовый редактор nano
    3.2 grep используется для поиска подстроки в файле
4.Для компиляции используется gcc
    флаги:
        -с компиляция в обьектный фаил без линковки
        -S вывод фаила с асмблерным кодом
        -o задает имя выходного файла
        -E остановка компиляции после применения препроцессора
        -Wall вывод всех warning сообщений
        -g добавление отладочной информации для debug
        -O задает уровень оптимизации кода компилятором
    nm используется для вывода информации о бинарных файлах
        пример команды: nm build/app
    ld - линковщик, обьединяет несколько обьектных файлов в 1 испольняемый.

5. для отладки используется gdb
   кмопилируем ошибочную программу
   gcc crash/crash.c -g 
   запускаем отладку программы
   gdb a.out 
   выполнение программы завершается с ошибкой в пятной строке исходного файла, на попытке разименовать нулевой указатель.
   Program received signal SIGSEGV, Segmentation fault.
   0x0000555555555150 in main () at src/crash.c:5
   5           int num2 = *ptr;


6. Makefile собирает программу из фаилов исходного кода,которые находятся в папке srс, объектные файлы и бинарник генерируются в папке build.
   для сборки проекта нужно выполнить команду make и запустить программу командой build/app
   
7. Сборка и установка Cpython из репозитория https://github.com/python/cpython
   Команды сборки:
   git clone https://github.com/python/cpython -depth 1
   cd cpython/
   ./configure
   make
   make test
   make install
   make clean