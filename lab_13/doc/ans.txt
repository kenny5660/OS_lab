Сделаем тесты, проверяющие следующие свойства очереди:
- потокоустойчивость,
- выполнение pop при пустой очериди.
Для тестирование этих моментов используем реализованные функции thread_safe_test и empty_queue_test соответственно.

empty_queue_test:
1. Запускается поток, который выполняет pop из  пустой очереди
2. Ждем 1 секунду
3. Запускаем поток который пушит в очередь
Если не используется условные переменные то программа завершится с ошибкой

thread_safe_test:
1. массив данных  очереди обнуляется
2. создаются 2 потока
    1й поток пишет 1
    2й поток пишет 2

Если произойдет колизия в этом участке кода:

queue->array[queue->next_in] = item;
queue->next_in = queue_incr(queue, queue->next_in);

то произойдет запись в 1 и ту же ячейку но произойдет двойной инкремент и слде ячейка будет пропущена и там останеся значение 0



Параметры запуска тестов:
thread_safe_test Размер очереди: 160000
empty_queue_test Размер очереди: 16

Проведём тестирование:
queue.c упал при обоих тестах, что означает что он не потокоустойчивый и не защищает от pop пустой очереди,
queue_mutex.c упал empty_queue_test, что означает что он потокоустойчивый, но имеет защиты от pop пустой очереди,
queue_cond.c не упал при выполнении тестов, что означает что не потокоустойчивый и защищает от pop пустой очереди.

queue_mutex.c - имеет мьютексы для потокоустойчивости
queue_cond.с по мимо мьютексов имеет и условные переменные, что позволяет обеспечивать безопастность pop.
