1)
Программа печатает в каждом потоке начальные данные перед vector_add и результат выполнения данной функции.
Результат может меняться от вызова к вызову, так как весь worker не покрыт мьютексами, но на практике на такой не большой программе это маловероятно.

При добавлении -d взаимная блокировка возникает не всегда, а только при поподании переключения потоков между мьютексами.

В случае если число потоков = 1 взаимной блокировки не возникнет.

2)
Программа избегает мёртвой блокировки за счёт упорядочивания по адресамм, что позволяет постояннно сохронять порядок блокировки.

В случае если одреса совпадают, то это один мьютекс и для коректной работы программы его надо блокировать 1 раз.

В случае увеличения числа циклов и потоков время выполнения растёт.

В случае включения -p время уменьшается, так как разрешается параллелизм.

3)
Вызовы pthread_mutex_trylock необходимы для создания порядка блокировки, для того чтобы избежать дедлока.

С увеличением числа потоков происходит рост повторных попыток, что является логичным, так как переключение между потоками становится более частым.

4)
Данный поход защищает уезвимое место deadlock, созданием глобального мьютекса, но при этом не даёт различным векторам выполняться параллельно.

При использовании -p время уменьшается.

5)
Указав memory мы дожидаемся завершения всех операцией с памятью, что своего рода позволяет заменить мьютексы. (https://ru.wikipedia.org/wiki/GCC_Inline_Assembly)

Сравним время выполнения следующих команд:
./vector-nolock -t -n 2 -l 1000000 -d   Time: 3.05 seconds
./vector-nolock -t -n 2 -l 1000000 -d -p  Time: 0.95 seconds

./vector-avoid-hold-and-wait -t -n 2 -l 1000000 -d  Time: 0.74 seconds
./vector-avoid-hold-and-wait -t -n 2 -l 1000000 -d -p Time: 0.59 seconds

./vector-try-wait -t -n 2 -l 1000000 -d Time: 1.17 seconds
./vector-try-wait -t -n 2 -l 1000000 -d -p Time: 0.25 seconds

./vector-global-order -t -n 2 -l 1000000 -d Time: 0.54 seconds
./vector-global-order -t -n 2 -l 1000000 -d -p Time: 0.29 seconds

Таким образом видно, что vector-nolock работает медленнее других в любом случае.